1、委托
委托是一个类，用来定义方法的类型。可以将方法作为参数动态传入到其他方法中。
避免使用了大量的if-else(switch)操作，提高了开发效率。
Func,Action
Func有返回类型
Action只有参数类型，没有返回类型

2、泛型
可以作为一个类型参数，使得设计类和方法时不必确定一个或多个具体参数。避免了运行时类型转换或装箱操作的代价和风险

3、依赖注入
依赖反转(IOC):IOC是一种设计理念，是一种面向对象的设计原则。
依赖注入(DI):DI则是在IOC概念的基础上，结合接口，结合反射机制所形成的应用。

在.net core中的start.cs中存在一个方法ConfigureService，通过自带容器IServiceCollection可以实现
其中有三种注入的方式
service.AddTransient 瞬时生命周期   每一次获取的对象都是最新的
service.AddSingleton 单例生命周期   在容器中永远都会只有这一个
service.AddScoped	 作用域生命周期 只有当前这个实例

但是在开发过程中，一般都是通过第三方包Autofac进行实现。Autofac也支持AOP。

4、AOP
AOP面向切面编程，也叫作面向方法编程。是通过预编译的方式和运行期间动态代理在不改变源代码的方式下给程序动态统计添加功能的一种技术。

利用AOP可以对业务逻辑各个部分进行隔离，从而使业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高开发效率。

AOP的使用场景主要包括日志记录、性能统计、安全控制、事务处理、异常处理等。


5、中间件
所有的web框架都是通过将http请求封装成一个管道。每一次请求都是对管道的一系列操作。
中间件就相当于管道中的一个组件。中间件可以对每个请求进行拦截并进行响应和其他操作。
中间件可以有很多个。每个中间件都可以决定是否将请求释放给下一个中间件。

在.net core中提供了IApplicationBuilder接口来把中间件注册到asp.net的请求管道中，中间件是一个典型的AOP应用
中间件的执行顺序按照startup.cs中Configure方法注册的先后顺序执行
有三种方式可以在管道中注册中间件
app.use IApplicationBuilder接口原生提供，注册等都用它
app.map 是一个扩展方法，类似于MVC的路由，用途一般是处理一些特殊请求的路径。
app.run 是一个扩展方法，它需要一个RequestDelegate委托，里面包含Http的上下文信息，没有next参数。因为它总是在最后执行

什么时候用中间件呢？

run、map内部也是调用的use方法，算是对IApplicationBuilder的补充
可以使用app.UseMiddleware()，不但提供了注册中间件的功能，还提供了依赖注入

6、进程，线程
一个进程包含多个线程，线程共享进程的资源。
在.net 4.0 Framework中开始引入的一项基于队列的异步任务（TAP）模式，从 .NET Framework 4.5 开始，任何使用 async/await 进行修饰的方法，都会被认为是一个异步方法；实际上，这些异步方法都是基于队列的线程任务，从你开始使用 Task 去运行一段代码的时候，实际上就相当于开启了一个线程，默认情况下，这个线程数由线程池 ThreadPool 进行管理的。

5、Redis
全称是Remote Dictionary Server
redis 支持五种数据类型：string，hash，list(列表)，set(集合)，sort set(有序集合)
redis 本质上是一个键值对类型的内存数据库，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。因为是纯内存操作，redis的性能非常出色，每秒可以处理超过10万次的读写操作，是已知性能最快的键值对数据库。redis的出色之处不仅仅是性能，redis最大的魅力是支持保存多种数据结构。


6、反射
dotnet框架的功能，都能使用反射
是动态的，在内存里拿到对象的描述，会影响程序的性能

7、值类型、引用类型
	值类型：	数值、字符、bool、struct、enum
	引用类型：	class、数组、委托(delegate)、接口(interface)、字符串
8、SQL的优化

9、类&抽象类

10、视图，事务，存储过程，触发器

11、装箱，拆箱